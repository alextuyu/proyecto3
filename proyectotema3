
### METODO DE PUNTO FIJO
from math import *
def g(x):
    y=0.5*sqrt(10-x**3)
    return y
p0=0
tol=0.001
n0=50
i=1
while i<=n0:
    p=g(p0)
    if abs(p-p0)<tol:
        print("El punto fijo es ",p," despues de ",i," iteraciones")
        break
    i=i+1
    p0=p
if i>=n0:
    print("El metodo no converge ")


# In[39]:


### METODO NEWTON
import math
def funcion (x):
    return math.pow (2.718, -x)-x;
def funcion2 (x):
    return -(math.pow (2.718, -x))-1;
x0=0
x1=0
i=1
print("i|    ""xi        " "Fxi        " "fÂ´xi            " "xi+1           " "error        ")
while True:
    fxi=funcion(x0)
    finvxi=funcion2(x0)#funcion inversa
    ximas1=x0-(fxi/finvxi)
    error=abs((ximas1-x0)/ximas1)
    print(i,"    ""{:.4f}".format(x0),"    ""{:.4f}".format(fxi),"    ""{:.4f}".format(finvxi),"       ""{:.4f}".format(ximas1),"        ""{:.4f}".format(error))
    if i>10 or error<=0.01: #defino la cantidad de iteraciones y la cota de error
        break
    x0=ximas1
    i=i+1


# In[43]:


### Metodo Gauss seidel

import numpy as np

# INGRESO
A = np.array([[3., -0.1, -0.2],
              [0.1, 7, -0.3],
              [0.3, -0.2, 10]])

B = np.array([7.85, -19.3, 71.4])

X0 = np.array([0., 0., 0.])

tolera = 0.00001
iteramax = 100

# PROCEDIMIENTO

# Gauss-Seidel
tamano = np.shape(A)
n = tamano[0]
m = tamano[1]
#  valores iniciales
X = np.copy(X0)
diferencia = np.ones(n, dtype=float)
errado = 2 * tolera

itera = 0
while not (errado <= tolera or itera > iteramax):
    # por fila
    for i in range(0, n, 1):
        # por columna
        suma = 0
        for j in range(0, m, 1):
            # excepto diagonal de A
            if (i != j):
                suma = suma - A[i, j] * X[j]

        nuevo = (B[i] + suma) / A[i, i]
        diferencia[i] = np.abs(nuevo - X[i])
        X[i] = nuevo
    errado = np.max(diferencia)
    itera = itera + 1

# Respuesta X en columna
X = np.transpose([X])

# revisa si NO converge
if (itera > iteramax):
    X = 0
# revisa respuesta
verifica = np.dot(A, X)

# SALIDA
print('respuesta X: ')
print(X)
print('verificar A.X=B: ')
print(verifica)
# In[50]:


### Metodo jacobi


import os
import decimal


def Xval(a1, b1, c1, d1, y, z):  #
    x = (-(b1 * y) - (c1 * z) + d1) / a1  #
    return x  #
    #


def Yval(a2, b2, c2, d2, x, z):  # Formulas para recursividad
    y = (-(a2 * x) - (c2 * z) + d2) / b2  #
    return y  #
    #


def Zval(a3, b3, c3, d3, x, y):  #
    z = (-(a3 * x) - (b3 * y) + d3) / c3  #
    return z  #


def main():
    os.system("cls")
    vals = [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0]]
    cons = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    loop_val = 0
    
    "\n    METODO DE JACOBI\n\nA1x + B1y + C1z = D1\n\
A2x + B2y + C2z = D2\nA3x + B3y + C3z = D3\n\n"
    cons[0][0] = input("\nIngrese A1 > ")  # Constantes para ecuacion 1
    cons[0][1] = input("Ingrese B1 > ")
    cons[0][2] = input("Ingrese C1 > ")
    cons[0][3] = input("Ingrese D1 > ")
    cons[1][0] = input("\nIngrese A2 > ")  # Constantes para ecuacion 2
    cons[1][1] = input("Ingrese B2 > ")
    cons[1][2] = input("Ingrese C2 > ")
    cons[1][3] = input("Ingrese D2 > ")
    cons[2][0] = input("\nIngrese A3 > ")  # Constantes para ecuacion 3
    cons[2][1] = input("Ingrese B3 > ")
    cons[2][2] = input("Ingrese C3 > ")
    cons[2][3] = input("Ingrese D3 > ")
    os.system("cls")
    print
    "Calculando..."
    while (vals[0] != vals[1]):
        print
        vals[0]
        vals[1][0] = Xval(cons[0][0], cons[0][1], cons[0][2], cons[0][3], \
                          vals[0][1], vals[0][2])
        vals[1][1] = Yval(cons[1][0], cons[1][1], cons[1][2], cons[1][3], \
                          vals[0][0], vals[0][2])
        vals[1][2] = Zval(cons[2][0], cons[2][1], cons[2][2], cons[2][3], \
                          vals[0][0], vals[0][1])
        print
        vals[1]
        vals[0][0] = Xval(cons[0][0], cons[0][1], cons[0][2], cons[0][3], \
                          vals[1][1], vals[1][2])
        vals[0][1] = Yval(cons[1][0], cons[1][1], cons[1][2], cons[1][3], \
                          vals[1][0], vals[1][2])
        vals[0][2] = Zval(cons[2][0], cons[2][1], cons[2][2], cons[2][3], \
                          vals[1][0], vals[1][1])

   


main()
exit()

# In[ ]:





# In[ ]:



